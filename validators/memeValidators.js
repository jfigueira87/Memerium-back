import { check, validationResult, body, param } from 'express-validator';

// Middleware para manejar errores de validaci칩n
export const handleValidationErrors = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }
  next();
};

// Validaciones para crear un meme (POST)
export const memeValidationRules = [
  check('title')
    .notEmpty().withMessage('El t칤tulo es obligatorio')
    .isLength({ min: 3 }).withMessage('El t칤tulo debe tener al menos 3 caracteres'),
  
  check('category')
    .notEmpty().withMessage('La categor칤a es obligatoria')
    .isLength({ min: 3 }).withMessage('La categor칤a debe tener al menos 3 caracteres'),
    
  check('tags')
    .notEmpty().withMessage('Las etiquetas son obligatorias')
    .isLength({ min: 3 }).withMessage('La etiqueta debe tener al menos 3 caracteres'),
  
  check('url')
    .notEmpty().withMessage('La URL es obligatoria')
    .isURL({
      protocols: ['http', 'https'], // Asegura que sea http o https
      require_protocol: true,        // Requiere que incluya el protocolo (http/https)
      require_valid_protocol: true,  // Solo acepta protocolos v치lidos
      allow_underscores: true,       // Permite guiones bajos en el dominio
    }).withMessage('La URL debe ser v치lida y comenzar con http o https')
];

// Validaciones para actualizar un meme (PUT)
export const validateCreateOrUpdate = [
  body('title')
    .optional()
    .isString()
    .withMessage('游뚿El t칤tulo debe ser un texto游뚿'),
  body('category')
    .optional()
    .isString()
    .withMessage('游뚿La categor칤a debe ser un texto游뚿'),
  body('tags')
    .optional()
    .isString()
    .withMessage('游뚿Los tags deben ser un texto游뚿'),
  body('url')
    .optional()
    .isURL()
    .withMessage('游뚿Debe proporcionar una URL v치lida游뚿')
];

// Validaciones para rutas que incluyen el ID como par치metro
export const validateIdParam = [
  param('id')
    .isInt()
    .withMessage('游뚿El ID debe ser un n칰mero entero游뚿')
];
