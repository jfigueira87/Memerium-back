import { validationResult } from 'express-validator';
import { body, param } from 'express-validator';

export const handleValidation = (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).send(errors.array()[0].msg);
    }
    next();
  };

  export const validateCreateOrUpdate = [
    body('name')
      .notEmpty()
      .withMessage('ğŸš¨El tÃ­tulo es obligatorioğŸš¨')
      .isString()
      .withMessage('ğŸš¨El tÃ­tulo debe ser un textoğŸš¨'),
    body('category')
      .notEmpty()
      .withMessage('ğŸš¨La categorÃ­a es obligatoriağŸš¨')
      .isString()
      .withMessage('ğŸš¨La categorÃ­a debe ser un textoğŸš¨'),
    body('tags')
      .notEmpty()
      .withMessage('ğŸš¨Los tags son obligatoriosğŸš¨')
      .isString()
      .withMessage('ğŸš¨Los tags deben ser un textoğŸš¨'),
    body('url')
      .notEmpty()
      .withMessage('ğŸš¨La URL es obligatoriağŸš¨')
      .isURL()
      .withMessage('ğŸš¨Debe proporcionar una URL vÃ¡lidağŸš¨')
  ];
  
  // Validaciones para rutas que incluyen el ID como parÃ¡metro
  export const validateIdParam = [
    param('id')
      .isString()
      .withMessage('ğŸš¨El ID debe ser una cadena de textoğŸš¨')
  ];